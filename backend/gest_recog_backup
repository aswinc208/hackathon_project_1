{"cells":[{"cell_type":"markdown","metadata":{},"source":["# **Importing Libraries**"]},{"cell_type":"code","execution_count":1,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:49:20.278443Z","iopub.status.busy":"2023-05-24T06:49:20.277995Z","iopub.status.idle":"2023-05-24T06:49:29.194917Z","shell.execute_reply":"2023-05-24T06:49:29.193545Z","shell.execute_reply.started":"2023-05-24T06:49:20.278407Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n","\n"]}],"source":["# Import the needed Libraries\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import os\n","from imageio import imread\n","from skimage.transform import resize\n","import datetime\n","import os\n","\n","# Supress all the warnings\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Import the random seed and tensorflow\n","np.random.seed(30)\n","import random as rn\n","rn.seed(30)\n","import tensorflow as tf\n","tf.random.set_seed(30)\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Dense, Flatten, TimeDistributed, BatchNormalization, Activation, Dropout, SimpleRNN, Conv2D, MaxPooling2D\n","from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n","from tensorflow.keras import optimizers\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Loading the Data**"]},{"cell_type":"markdown","metadata":{},"source":["> In this process, this where we learn what's the dataset in consists of as well forming it into dimensions. "]},{"cell_type":"code","execution_count":2,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:49:36.529193Z","iopub.status.busy":"2023-05-24T06:49:36.528144Z","iopub.status.idle":"2023-05-24T06:49:36.589034Z","shell.execute_reply":"2023-05-24T06:49:36.587921Z","shell.execute_reply.started":"2023-05-24T06:49:36.529142Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["(259, 1)\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 259 entries, 0 to 258\n","Data columns (total 1 columns):\n"," #   Column                                                       Non-Null Count  Dtype \n","---  ------                                                       --------------  ----- \n"," 0   WIN_20180925_17_34_05_Pro_Thumbs_Down_new;Thumbs_Down_new;0  259 non-null    object\n","dtypes: object(1)\n","memory usage: 2.2+ KB\n","None\n"]}],"source":["project_folder=r'C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset'\n","read = pd.read_csv(r\"C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\train.csv\", dtype=object)\n","print(read.shape)\n","print(read.info())"]},{"cell_type":"markdown","metadata":{},"source":["# **Generator**"]},{"cell_type":"markdown","metadata":{},"source":["> For train_doc and val_doc, it takes random lists of files in train.csv and val.csv to for when training CNN+RNN model. "]},{"cell_type":"code","execution_count":3,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:49:41.768104Z","iopub.status.busy":"2023-05-24T06:49:41.767621Z","iopub.status.idle":"2023-05-24T06:49:41.785829Z","shell.execute_reply":"2023-05-24T06:49:41.784595Z","shell.execute_reply.started":"2023-05-24T06:49:41.768069Z"},"trusted":true},"outputs":[],"source":["## Let us take the Input in to Train and Val doc and Iniatise the Bath size as 10 first and then we train the model\n","train_doc = np.random.permutation(open(r\"C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\train.csv\").readlines())\n","val_doc = np.random.permutation(open(r\"C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\val.csv\").readlines())\n","batch_size = 10 #experiment with the batch size"]},{"cell_type":"markdown","metadata":{},"source":["> In this generator function below,there's  a dataset full of videos. The goal is to try to feed the batches of images from videos. What the function is essentially trying to do is ,from each video , to take x amount of images. For each images, they will be resize to the the number we initialize y and z. Then the images are stored inside the batch size (file). From this batch, each images are double checked if each one of them are in the same dimensions. If not, neural network will consider as an input error. If the two images are in different dimensions, the function will crop and resize the images. Once the whole process is done, the images are stored in another file to use for training the model. "]},{"cell_type":"code","execution_count":4,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:49:46.870552Z","iopub.status.busy":"2023-05-24T06:49:46.870069Z","iopub.status.idle":"2023-05-24T06:49:46.893352Z","shell.execute_reply":"2023-05-24T06:49:46.890869Z","shell.execute_reply.started":"2023-05-24T06:49:46.870513Z"},"trusted":true},"outputs":[],"source":["from imageio import imread\n","import numpy as np\n","import os\n","from skimage.transform import resize\n","\n","channels = 3  # RGB as 3D Convlution\n","classes = 2\n","x = 30  # No. of frames images\n","y = 120  # Width of the image\n","z = 120  # height\n","\n","def generator_1(source_path, folder_list, batch_size):\n","    print('Source path = ', source_path, '; batch size =', batch_size)\n","    img_idx = [x for x in range(0, x)]  # create a list of image numbers you want to use for a particular video\n","    while True:\n","        t = np.random.permutation(folder_list)\n","        num_batches = len(folder_list) // batch_size  # calculate the number of batches\n","        for batch in range(num_batches):  # we iterate over the number of batches\n","            batch_data = np.zeros((batch_size, x, y, z, channels))  # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n","            batch_labels = np.zeros((batch_size, classes))  # batch_labels is the one hot representation of the output\n","            for folder in range(batch_size):  # iterate over the batch_size\n","                imgs = os.listdir(source_path + '/' + t[folder + (batch * batch_size)].split(';')[0])  # read all the images in the folder\n","                for idx, item in enumerate(img_idx):  # Iterate over the frames/images of a folder to read them in\n","                    image = imread(source_path + '/' + t[folder + (batch * batch_size)].strip().split(';')[0] + '/' + imgs[item]).astype(np.float32)\n","\n","                    # crop the images and resize them. Note that the images are of 2 different shapes\n","                    # and the conv3D will throw an error if the inputs in a batch have different shapes\n","                    # Let us resize all the images\n","                    temp_img = resize(image, (y, z))\n","                    temp_img = temp_img.mean(axis=-1, keepdims=True)  # Convert to grayscale\n","                    temp_img = temp_img / 255.0  # Normalize data\n","\n","                    batch_data[folder, idx] = temp_img  # Normalize and feed in the image\n","\n","                batch_labels[folder, int(t[folder + (batch * batch_size)].strip().split(';')[2])] = 1\n","            yield batch_data, batch_labels  # you yield the batch_data and the batch_labels, remember what does yield do\n","\n","        # write the code for the remaining data points which are left after full batches.\n","\n","        if len(folder_list) != batch_size * num_batches:\n","            print(\"Batches: \", num_batches + 1, \"Index:\", batch_size)\n","            batch_size = len(folder_list) - (batch_size * num_batches)\n","            batch_data = np.zeros((batch_size, x, y, z, channels))  # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n","            batch_labels = np.zeros((batch_size, classes))  # batch_labels is the one hot representation of the output\n","            for folder in range(batch_size):  # iterate over the batch_size\n","                imgs = os.listdir(source_path + '/' + t[folder + (batch * batch_size)].split(';')[0])  # read all the images in the folder\n","                for idx, item in enumerate(img_idx):  # Iterate over the frames/images of a folder to read them in\n","                    image = imread(source_path + '/' + t[folder + (batch * batch_size)].strip().split(';')[0] + '/' + imgs[item]).astype(np.float32)\n","\n","                    # crop the images and resize them. Note that the images are of 2 different shapes\n","                    # and the conv3D will throw an error if the inputs in a batch have different shapes\n","                    temp_img = resize(image, (y, z))\n","                    temp_img = temp_img.mean(axis=-1, keepdims=True)  # Convert to grayscale\n","                    temp_img = temp_img / 255.0  # Normalize data\n","\n","                    batch_data[folder, idx] = temp_img\n","\n","                batch_labels[folder, int(t[folder + (batch * batch_size)].strip().split(';')[2])] = 1\n","            yield batch_data, batch_labels\n"]},{"cell_type":"markdown","metadata":{},"source":["> This function below is try to count how many videos are currently in train.csv and how many are in in val.csv. "]},{"cell_type":"code","execution_count":5,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:51:17.460676Z","iopub.status.busy":"2023-05-24T06:51:17.460183Z","iopub.status.idle":"2023-05-24T06:51:17.467865Z","shell.execute_reply":"2023-05-24T06:51:17.467025Z","shell.execute_reply.started":"2023-05-24T06:51:17.46064Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["# Training_Sequences = 260\n","# Validation_Sequences = 37\n","# Epochs =  40\n"]}],"source":["curr_dt_time = datetime.datetime.now()\n","train_path = r\"C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\Train\"\n","val_path = r\"C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\Val\"\n","num_train_sequences = len(train_doc)\n","print('# Training_Sequences =', num_train_sequences)\n","num_val_sequences = len(val_doc)\n","print('# Validation_Sequences =', num_val_sequences)\n","num_epochs = 40 # choose the number of epochs\n","print ('# Epochs = ', num_epochs)"]},{"cell_type":"markdown","metadata":{},"source":["# **Building CNN+RNN Model**"]},{"cell_type":"code","execution_count":6,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T15:47:11.452786Z","iopub.status.busy":"2023-05-23T15:47:11.45215Z","iopub.status.idle":"2023-05-23T15:47:12.091272Z","shell.execute_reply":"2023-05-23T15:47:12.09005Z","shell.execute_reply.started":"2023-05-23T15:47:11.45275Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\layers\\normalization\\batch_normalization.py:979: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"]},{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," time_distributed (TimeDist  (None, 30, 120, 120, 16   448       \n"," ributed)                    )                                   \n","                                                                 \n"," time_distributed_1 (TimeDi  (None, 30, 120, 120, 16   64        \n"," stributed)                  )                                   \n","                                                                 \n"," time_distributed_2 (TimeDi  (None, 30, 60, 60, 16)    0         \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_3 (TimeDi  (None, 30, 60, 60, 32)    4640      \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_4 (TimeDi  (None, 30, 60, 60, 32)    128       \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_5 (TimeDi  (None, 30, 30, 30, 32)    0         \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_6 (TimeDi  (None, 30, 30, 30, 64)    18496     \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_7 (TimeDi  (None, 30, 30, 30, 64)    256       \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_8 (TimeDi  (None, 30, 15, 15, 64)    0         \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_9 (TimeDi  (None, 30, 15, 15, 128)   73856     \n"," stributed)                                                      \n","                                                                 \n"," time_distributed_10 (TimeD  (None, 30, 15, 15, 128)   512       \n"," istributed)                                                     \n","                                                                 \n"," time_distributed_11 (TimeD  (None, 30, 7, 7, 128)     0         \n"," istributed)                                                     \n","                                                                 \n"," time_distributed_12 (TimeD  (None, 30, 6272)          0         \n"," istributed)                                                     \n","                                                                 \n"," simple_rnn (SimpleRNN)      (None, 64)                405568    \n","                                                                 \n"," dropout (Dropout)           (None, 64)                0         \n","                                                                 \n"," dense (Dense)               (None, 64)                4160      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 64)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 2)                 130       \n","                                                                 \n","=================================================================\n","Total params: 508258 (1.94 MB)\n","Trainable params: 507778 (1.94 MB)\n","Non-trainable params: 480 (1.88 KB)\n","_________________________________________________________________\n","None\n"]}],"source":["\n","\n","CNNRNN_Model = Sequential()   \n","\n","CNNRNN_Model.add(TimeDistributed(Conv2D(16, (3, 3) , padding='same', activation='relu'),input_shape=(x,y,z,3)))\n","CNNRNN_Model.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model.add(TimeDistributed(Conv2D(32, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model.add(TimeDistributed(Conv2D(64, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model.add(TimeDistributed(Conv2D(128, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model.add(TimeDistributed(MaxPooling2D((2, 2))))\n","\n","# Flatten layer \n","\n","CNNRNN_Model.add(TimeDistributed(Flatten()))\n","CNNRNN_Model.add(SimpleRNN(64))\n","CNNRNN_Model.add(Dropout(0.25))\n","\n","# Dense layer \n","CNNRNN_Model.add(Dense(64,activation='relu'))\n","CNNRNN_Model.add(Dropout(0.25))\n","# Softmax layer\n","\n","CNNRNN_Model.add(Dense(2, activation='softmax'))\n","\n","# Adam optimiser\n","\n","optimiser = optimizers.Adam(lr=0.0001) #write your optimizer\n","CNNRNN_Model.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","print (CNNRNN_Model.summary())"]},{"cell_type":"code","execution_count":7,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T15:47:12.09327Z","iopub.status.busy":"2023-05-23T15:47:12.092827Z","iopub.status.idle":"2023-05-23T15:47:12.098629Z","shell.execute_reply":"2023-05-23T15:47:12.097566Z","shell.execute_reply.started":"2023-05-23T15:47:12.093237Z"},"trusted":true},"outputs":[],"source":["# Let us train and validate the model \n","train_generator = generator_1(train_path, train_doc, batch_size)\n","val_generator = generator_1(val_path, val_doc, batch_size)"]},{"cell_type":"code","execution_count":8,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:51:26.499184Z","iopub.status.busy":"2023-05-24T06:51:26.49867Z","iopub.status.idle":"2023-05-24T06:51:26.508456Z","shell.execute_reply":"2023-05-24T06:51:26.506832Z","shell.execute_reply.started":"2023-05-24T06:51:26.49914Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:`period` argument is deprecated. Please use `save_freq` to specify the frequency in number of batches seen.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:`period` argument is deprecated. Please use `save_freq` to specify the frequency in number of batches seen.\n"]}],"source":["# Let us see the Validate the Losses and put back the checkpoint\n","\n","model_name = 'model_init' + '_' + str(curr_dt_time).replace(' ','').replace(':','_') + '/'\n","    \n","if not os.path.exists(model_name):\n","    os.mkdir(model_name)\n","        \n","filepath = model_name + 'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5'\n","\n","checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=False, save_weights_only=False, mode='auto', period=1)\n","\n","LR = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, cooldown=1, verbose=1) # write the REducelronplateau code here\n","callbacks_list = [checkpoint, LR]"]},{"cell_type":"code","execution_count":9,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:51:31.767545Z","iopub.status.busy":"2023-05-24T06:51:31.767076Z","iopub.status.idle":"2023-05-24T06:51:31.775433Z","shell.execute_reply":"2023-05-24T06:51:31.773951Z","shell.execute_reply.started":"2023-05-24T06:51:31.767509Z"},"trusted":true},"outputs":[],"source":["# Let us see that the steps_per_epoch and validation steps are used by fit to decide the no. of next()\n","\n","if (num_train_sequences%batch_size) == 0:\n","    steps_per_epoch = int(num_train_sequences/batch_size)\n","else:\n","    steps_per_epoch = (num_train_sequences//batch_size) + 1\n","\n","if (num_val_sequences%batch_size) == 0:\n","    validation_steps = int(num_val_sequences/batch_size)\n","else:\n","    validation_steps = (num_val_sequences//batch_size) + 1"]},{"cell_type":"code","execution_count":10,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T15:55:09.282503Z","iopub.status.busy":"2023-05-23T15:55:09.282099Z","iopub.status.idle":"2023-05-23T17:42:42.991869Z","shell.execute_reply":"2023-05-23T17:42:42.990791Z","shell.execute_reply.started":"2023-05-23T15:55:09.282468Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Source path =  C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\Train ; batch size = 10\n","Epoch 1/20\n","WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\utils\\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.\n","\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\utils\\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.\n","\n"]},{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\engine\\base_layer_utils.py:384: The name tf.executing_eagerly_outside_functions is deprecated. Please use tf.compat.v1.executing_eagerly_outside_functions instead.\n","\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:From c:\\Users\\Rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\engine\\base_layer_utils.py:384: The name tf.executing_eagerly_outside_functions is deprecated. Please use tf.compat.v1.executing_eagerly_outside_functions instead.\n","\n"]},{"name":"stdout","output_type":"stream","text":["26/26 [==============================] - ETA: 0s - loss: 0.8060 - categorical_accuracy: 0.5692Source path =  C:\\Users\\Rahul\\Desktop\\Thumbs_up_and_down_Dataset\\Val ; batch size = 10\n","Batches:  4 Index: 10\n","\n","Epoch 1: saving model to model_init_2024-01-2713_55_04.633886\\model-00001-0.80602-0.56923-0.75371-0.40541.h5\n","26/26 [==============================] - 59s 2s/step - loss: 0.8060 - categorical_accuracy: 0.5692 - val_loss: 0.7537 - val_categorical_accuracy: 0.4054 - lr: 0.0010\n","Epoch 2/20\n","26/26 [==============================] - ETA: 0s - loss: 0.5882 - categorical_accuracy: 0.6923Batches:  6 Index: 7\n","\n","Epoch 2: saving model to model_init_2024-01-2713_55_04.633886\\model-00002-0.58823-0.69231-0.63571-0.71429.h5\n","26/26 [==============================] - 50s 2s/step - loss: 0.5882 - categorical_accuracy: 0.6923 - val_loss: 0.6357 - val_categorical_accuracy: 0.7143 - lr: 0.0010\n","Epoch 3/20\n","26/26 [==============================] - ETA: 0s - loss: 0.4357 - categorical_accuracy: 0.7962\n","Epoch 3: saving model to model_init_2024-01-2713_55_04.633886\\model-00003-0.43569-0.79615-0.64662-0.75000.h5\n","26/26 [==============================] - 45s 2s/step - loss: 0.4357 - categorical_accuracy: 0.7962 - val_loss: 0.6466 - val_categorical_accuracy: 0.7500 - lr: 0.0010\n","Epoch 4/20\n","26/26 [==============================] - ETA: 0s - loss: 0.4348 - categorical_accuracy: 0.8154\n","Epoch 4: saving model to model_init_2024-01-2713_55_04.633886\\model-00004-0.43479-0.81538-0.66435-0.62500.h5\n","\n","Epoch 4: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n","26/26 [==============================] - 50s 2s/step - loss: 0.4348 - categorical_accuracy: 0.8154 - val_loss: 0.6643 - val_categorical_accuracy: 0.6250 - lr: 0.0010\n","Epoch 5/20\n","26/26 [==============================] - ETA: 0s - loss: 0.4307 - categorical_accuracy: 0.8192\n","Epoch 5: saving model to model_init_2024-01-2713_55_04.633886\\model-00005-0.43072-0.81923-0.65203-0.50000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.4307 - categorical_accuracy: 0.8192 - val_loss: 0.6520 - val_categorical_accuracy: 0.5000 - lr: 5.0000e-04\n","Epoch 6/20\n","26/26 [==============================] - ETA: 0s - loss: 0.3795 - categorical_accuracy: 0.8308Batches:  19 Index: 2\n","\n","Epoch 6: saving model to model_init_2024-01-2713_55_04.633886\\model-00006-0.37949-0.83077-0.57948-0.85714.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.3795 - categorical_accuracy: 0.8308 - val_loss: 0.5795 - val_categorical_accuracy: 0.8571 - lr: 5.0000e-04\n","Epoch 7/20\n","26/26 [==============================] - ETA: 0s - loss: 0.3125 - categorical_accuracy: 0.8692\n","Epoch 7: saving model to model_init_2024-01-2713_55_04.633886\\model-00007-0.31253-0.86923-0.46370-0.75000.h5\n","26/26 [==============================] - 48s 2s/step - loss: 0.3125 - categorical_accuracy: 0.8692 - val_loss: 0.4637 - val_categorical_accuracy: 0.7500 - lr: 5.0000e-04\n","Epoch 8/20\n","26/26 [==============================] - ETA: 0s - loss: 0.2502 - categorical_accuracy: 0.9038\n","Epoch 8: saving model to model_init_2024-01-2713_55_04.633886\\model-00008-0.25016-0.90385-0.83714-0.50000.h5\n","26/26 [==============================] - 48s 2s/step - loss: 0.2502 - categorical_accuracy: 0.9038 - val_loss: 0.8371 - val_categorical_accuracy: 0.5000 - lr: 5.0000e-04\n","Epoch 9/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1880 - categorical_accuracy: 0.9308\n","Epoch 9: saving model to model_init_2024-01-2713_55_04.633886\\model-00009-0.18802-0.93077-0.84190-0.50000.h5\n","\n","Epoch 9: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n","26/26 [==============================] - 49s 2s/step - loss: 0.1880 - categorical_accuracy: 0.9308 - val_loss: 0.8419 - val_categorical_accuracy: 0.5000 - lr: 5.0000e-04\n","Epoch 10/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1899 - categorical_accuracy: 0.9346\n","Epoch 10: saving model to model_init_2024-01-2713_55_04.633886\\model-00010-0.18991-0.93462-0.83487-0.75000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.1899 - categorical_accuracy: 0.9346 - val_loss: 0.8349 - val_categorical_accuracy: 0.7500 - lr: 2.5000e-04\n","Epoch 11/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1707 - categorical_accuracy: 0.9346\n","Epoch 11: saving model to model_init_2024-01-2713_55_04.633886\\model-00011-0.17065-0.93462-0.64114-0.50000.h5\n","\n","Epoch 11: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n","26/26 [==============================] - 48s 2s/step - loss: 0.1707 - categorical_accuracy: 0.9346 - val_loss: 0.6411 - val_categorical_accuracy: 0.5000 - lr: 2.5000e-04\n","Epoch 12/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1247 - categorical_accuracy: 0.9577\n","Epoch 12: saving model to model_init_2024-01-2713_55_04.633886\\model-00012-0.12467-0.95769-1.09898-0.50000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.1247 - categorical_accuracy: 0.9577 - val_loss: 1.0990 - val_categorical_accuracy: 0.5000 - lr: 1.2500e-04\n","Epoch 13/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1125 - categorical_accuracy: 0.9769\n","Epoch 13: saving model to model_init_2024-01-2713_55_04.633886\\model-00013-0.11254-0.97692-0.83727-0.75000.h5\n","\n","Epoch 13: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n","26/26 [==============================] - 49s 2s/step - loss: 0.1125 - categorical_accuracy: 0.9769 - val_loss: 0.8373 - val_categorical_accuracy: 0.7500 - lr: 1.2500e-04\n","Epoch 14/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0807 - categorical_accuracy: 0.9846\n","Epoch 14: saving model to model_init_2024-01-2713_55_04.633886\\model-00014-0.08066-0.98462-0.58410-0.75000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.0807 - categorical_accuracy: 0.9846 - val_loss: 0.5841 - val_categorical_accuracy: 0.7500 - lr: 6.2500e-05\n","Epoch 15/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0960 - categorical_accuracy: 0.9808\n","Epoch 15: saving model to model_init_2024-01-2713_55_04.633886\\model-00015-0.09595-0.98077-1.36825-0.25000.h5\n","\n","Epoch 15: ReduceLROnPlateau reducing learning rate to 3.125000148429535e-05.\n","26/26 [==============================] - 48s 2s/step - loss: 0.0960 - categorical_accuracy: 0.9808 - val_loss: 1.3682 - val_categorical_accuracy: 0.2500 - lr: 6.2500e-05\n","Epoch 16/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0871 - categorical_accuracy: 0.9731\n","Epoch 16: saving model to model_init_2024-01-2713_55_04.633886\\model-00016-0.08708-0.97308-1.19248-0.75000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.0871 - categorical_accuracy: 0.9731 - val_loss: 1.1925 - val_categorical_accuracy: 0.7500 - lr: 3.1250e-05\n","Epoch 17/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0952 - categorical_accuracy: 0.9808\n","Epoch 17: saving model to model_init_2024-01-2713_55_04.633886\\model-00017-0.09524-0.98077-0.61319-0.75000.h5\n","\n","Epoch 17: ReduceLROnPlateau reducing learning rate to 1.5625000742147677e-05.\n","26/26 [==============================] - 49s 2s/step - loss: 0.0952 - categorical_accuracy: 0.9808 - val_loss: 0.6132 - val_categorical_accuracy: 0.7500 - lr: 3.1250e-05\n","Epoch 18/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0763 - categorical_accuracy: 0.9808\n","Epoch 18: saving model to model_init_2024-01-2713_55_04.633886\\model-00018-0.07629-0.98077-0.07172-1.00000.h5\n","26/26 [==============================] - 48s 2s/step - loss: 0.0763 - categorical_accuracy: 0.9808 - val_loss: 0.0717 - val_categorical_accuracy: 1.0000 - lr: 1.5625e-05\n","Epoch 19/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0831 - categorical_accuracy: 0.9846\n","Epoch 19: saving model to model_init_2024-01-2713_55_04.633886\\model-00019-0.08313-0.98462-0.53420-0.75000.h5\n","26/26 [==============================] - 49s 2s/step - loss: 0.0831 - categorical_accuracy: 0.9846 - val_loss: 0.5342 - val_categorical_accuracy: 0.7500 - lr: 1.5625e-05\n","Epoch 20/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0680 - categorical_accuracy: 0.9923\n","Epoch 20: saving model to model_init_2024-01-2713_55_04.633886\\model-00020-0.06800-0.99231-0.01009-1.00000.h5\n","26/26 [==============================] - 48s 2s/step - loss: 0.0680 - categorical_accuracy: 0.9923 - val_loss: 0.0101 - val_categorical_accuracy: 1.0000 - lr: 1.5625e-05\n"]}],"source":["history = CNNRNN_Model.fit(train_generator, steps_per_epoch = steps_per_epoch, epochs=20, verbose=1,\n","                    callbacks=callbacks_list, validation_data=val_generator, \n","                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"]},{"cell_type":"code","execution_count":14,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T17:42:58.630029Z","iopub.status.busy":"2023-05-23T17:42:58.629639Z","iopub.status.idle":"2023-05-23T17:42:58.636017Z","shell.execute_reply":"2023-05-23T17:42:58.634812Z","shell.execute_reply.started":"2023-05-23T17:42:58.629998Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Validation Accuracy: 66.76%\n"]}],"source":["val_accuracy = np.mean(history.history['val_categorical_accuracy'])\n","print(\"\\n%s: %.2f%%\" % ('Validation Accuracy', val_accuracy*100))"]},{"cell_type":"markdown","metadata":{},"source":["# **Training And Validation Loss Over Epochs**"]},{"cell_type":"code","execution_count":15,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T17:43:01.571786Z","iopub.status.busy":"2023-05-23T17:43:01.57131Z","iopub.status.idle":"2023-05-23T17:43:01.901119Z","shell.execute_reply":"2023-05-23T17:43:01.900062Z","shell.execute_reply.started":"2023-05-23T17:43:01.571745Z"},"trusted":true},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","\n","history_df = pd.DataFrame(history.history)\n","plt.plot(history_df.loc[:, ['loss']], \"#800000\", label='Training loss')\n","plt.plot(history_df.loc[:, ['val_loss']], \"#030764\", label='Validation loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["# **Training And Validation Accuracy Over Epochs**"]},{"cell_type":"code","execution_count":13,"metadata":{"execution":{"iopub.execute_input":"2023-05-23T17:43:06.764379Z","iopub.status.busy":"2023-05-23T17:43:06.763941Z","iopub.status.idle":"2023-05-23T17:43:07.094122Z","shell.execute_reply":"2023-05-23T17:43:07.093034Z","shell.execute_reply.started":"2023-05-23T17:43:06.764343Z"},"trusted":true},"outputs":[{"ename":"NameError","evalue":"name 'plot' is not defined","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[1;32mIn[13], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m history_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(history\u001b[38;5;241m.\u001b[39mhistory)\n\u001b[1;32m----> 3\u001b[0m \u001b[43mplot\u001b[49m\u001b[38;5;241m.\u001b[39mplot(history_df\u001b[38;5;241m.\u001b[39mloc[:, [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategorical_accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m]], \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#800000\u001b[39m\u001b[38;5;124m\"\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      4\u001b[0m plot\u001b[38;5;241m.\u001b[39mplot(history_df\u001b[38;5;241m.\u001b[39mloc[:, [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mval_categorical_accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m]], \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#030764\u001b[39m\u001b[38;5;124m\"\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValidation accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      6\u001b[0m plot\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining and Validation Accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[1;31mNameError\u001b[0m: name 'plot' is not defined"]}],"source":["history_df = pd.DataFrame(history.history)\n","\n","plot.plot(history_df.loc[:, ['categorical_accuracy']], \"#800000\", label='Training accuracy')\n","plot.plot(history_df.loc[:, ['val_categorical_accuracy']], \"#030764\", label='Validation accuracy')\n","\n","plot.title('Training and Validation Accuracy')\n","plot.xlabel('Epochs')\n","plot.ylabel('Accuracy')\n","\n","plot.legend()\n","plot.show()"]},{"cell_type":"markdown","metadata":{},"source":["# **Same CNN+RNN Model with Different Image's Size (30X30)**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:50:03.978951Z","iopub.status.busy":"2023-05-24T06:50:03.978374Z","iopub.status.idle":"2023-05-24T06:50:04.661457Z","shell.execute_reply":"2023-05-24T06:50:04.659761Z","shell.execute_reply.started":"2023-05-24T06:50:03.978913Z"},"trusted":true},"outputs":[],"source":["x = 30 # number of frames\n","y = 30 # image width\n","z = 30 # image height\n","\n","CNNRNN_Model2 = Sequential()   \n","\n","CNNRNN_Model2.add(TimeDistributed(Conv2D(16, (3, 3) , padding='same', activation='relu'),input_shape=(x,y,z,3)))\n","CNNRNN_Model2.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model2.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model2.add(TimeDistributed(Conv2D(32, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model2.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model2.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model2.add(TimeDistributed(Conv2D(64, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model2.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model2.add(TimeDistributed(MaxPooling2D((2, 2))))\n","        \n","CNNRNN_Model2.add(TimeDistributed(Conv2D(128, (3, 3) , padding='same', activation='relu')))\n","CNNRNN_Model2.add(TimeDistributed(BatchNormalization()))\n","CNNRNN_Model2.add(TimeDistributed(MaxPooling2D((2, 2))))\n","\n","# Flatten layer \n","\n","CNNRNN_Model2.add(TimeDistributed(Flatten()))\n","\n","CNNRNN_Model2.add(SimpleRNN(64))\n","CNNRNN_Model2.add(Dropout(0.25))\n","\n","# Dense layer \n","CNNRNN_Model2.add(Dense(64,activation='relu'))\n","CNNRNN_Model2.add(Dropout(0.25))\n","# Softmax layer\n","\n","CNNRNN_Model2.add(Dense(5, activation='softmax'))\n","\n","# Adam optimiser\n","\n","optimiser = optimizers.Adam(lr=0.001) #write your optimizer\n","CNNRNN_Model2.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","print (CNNRNN_Model2.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:50:39.171889Z","iopub.status.busy":"2023-05-24T06:50:39.170606Z","iopub.status.idle":"2023-05-24T06:50:39.177527Z","shell.execute_reply":"2023-05-24T06:50:39.176374Z","shell.execute_reply.started":"2023-05-24T06:50:39.171837Z"},"trusted":true},"outputs":[],"source":["train_generator = generator_1(train_path, train_doc, batch_size)\n","val_generator = generator_1(val_path, val_doc, batch_size)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T06:51:51.373094Z","iopub.status.busy":"2023-05-24T06:51:51.371899Z","iopub.status.idle":"2023-05-24T08:26:43.91286Z","shell.execute_reply":"2023-05-24T08:26:43.91076Z","shell.execute_reply.started":"2023-05-24T06:51:51.373039Z"},"trusted":true},"outputs":[],"source":["history1 = CNNRNN_Model2.fit(train_generator, steps_per_epoch = steps_per_epoch, epochs=40, verbose=1,\n","                    callbacks=callbacks_list, validation_data=val_generator, \n","                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T08:27:24.0206Z","iopub.status.busy":"2023-05-24T08:27:24.019435Z","iopub.status.idle":"2023-05-24T08:27:24.027452Z","shell.execute_reply":"2023-05-24T08:27:24.026008Z","shell.execute_reply.started":"2023-05-24T08:27:24.02055Z"},"trusted":true},"outputs":[],"source":["val_accuracy = np.mean(history1.history['val_categorical_accuracy'])\n","print(\"\\n%s: %.2f%%\" % ('Validation Accuracy', val_accuracy*100))"]},{"cell_type":"markdown","metadata":{},"source":["# **Training And Validation Loss Over Epochs (Image's Size 30X30)**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T08:27:40.654355Z","iopub.status.busy":"2023-05-24T08:27:40.653488Z","iopub.status.idle":"2023-05-24T08:27:41.010369Z","shell.execute_reply":"2023-05-24T08:27:41.009005Z","shell.execute_reply.started":"2023-05-24T08:27:40.654307Z"},"trusted":true},"outputs":[],"source":["history_df = pd.DataFrame(history1.history)\n","plot.plot(history_df.loc[:, ['loss']], \"#800000\", label='Training loss')\n","plot.plot(history_df.loc[:, ['val_loss']],\"#030764\", label='Validation loss')\n","plot.title('Training and Validation Loss')\n","plot.xlabel('Epochs')\n","plot.ylabel('Loss')\n","\n","plot.legend(loc=\"best\")\n","plot.show()"]},{"cell_type":"markdown","metadata":{},"source":["# **Training And Validation Accuracy Over Epochs (Image's Size 30X30)**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-05-24T08:27:46.207854Z","iopub.status.busy":"2023-05-24T08:27:46.206608Z","iopub.status.idle":"2023-05-24T08:27:46.549059Z","shell.execute_reply":"2023-05-24T08:27:46.547591Z","shell.execute_reply.started":"2023-05-24T08:27:46.207793Z"},"trusted":true},"outputs":[],"source":["history_df = pd.DataFrame(history1.history)\n","\n","plot.plot(history_df.loc[:, ['categorical_accuracy']], \"#800000\", label='Training accuracy')\n","plot.plot(history_df.loc[:, ['val_categorical_accuracy']], \"#030764\", label='Validation accuracy')\n","\n","plot.title('Training and Validation Accuracy')\n","plot.xlabel('Epochs')\n","plot.ylabel('Accuracy')\n","\n","plot.legend()\n","plot.show()"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":2735993,"sourceId":4734051,"sourceType":"datasetVersion"}],"dockerImageVersionId":30474,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"}},"nbformat":4,"nbformat_minor":4}
